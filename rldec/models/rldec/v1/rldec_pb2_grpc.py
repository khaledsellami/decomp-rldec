# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import rldec_pb2 as rldec__pb2


class RLDecStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.decompose = channel.unary_unary(
                '/rldec.v1.RLDec/decompose',
                request_serializer=rldec__pb2.DecompositionRequest.SerializeToString,
                response_deserializer=rldec__pb2.DecompositionResponse.FromString,
                )
        self.getModels = channel.unary_unary(
                '/rldec.v1.RLDec/getModels',
                request_serializer=rldec__pb2.ModelsRequest.SerializeToString,
                response_deserializer=rldec__pb2.ModelsResponse.FromString,
                )
        self.getModelDetails = channel.unary_unary(
                '/rldec.v1.RLDec/getModelDetails',
                request_serializer=rldec__pb2.ModelDetailsRequest.SerializeToString,
                response_deserializer=rldec__pb2.ModelDetails.FromString,
                )
        self.getTrainedApps = channel.unary_unary(
                '/rldec.v1.RLDec/getTrainedApps',
                request_serializer=rldec__pb2.TrainedAppsRequest.SerializeToString,
                response_deserializer=rldec__pb2.TrainedAppsResponse.FromString,
                )


class RLDecServicer(object):
    """Missing associated documentation comment in .proto file."""

    def decompose(self, request, context):
        """rpc getDecomposition  (TrainRequest) returns (DecompositionResponse) {}; //trains then generates a decomposition
        rpc trainModel (TrainRequest) returns (TrainingResponse) {}; //just trains the model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getModelDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTrainedApps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RLDecServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'decompose': grpc.unary_unary_rpc_method_handler(
                    servicer.decompose,
                    request_deserializer=rldec__pb2.DecompositionRequest.FromString,
                    response_serializer=rldec__pb2.DecompositionResponse.SerializeToString,
            ),
            'getModels': grpc.unary_unary_rpc_method_handler(
                    servicer.getModels,
                    request_deserializer=rldec__pb2.ModelsRequest.FromString,
                    response_serializer=rldec__pb2.ModelsResponse.SerializeToString,
            ),
            'getModelDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.getModelDetails,
                    request_deserializer=rldec__pb2.ModelDetailsRequest.FromString,
                    response_serializer=rldec__pb2.ModelDetails.SerializeToString,
            ),
            'getTrainedApps': grpc.unary_unary_rpc_method_handler(
                    servicer.getTrainedApps,
                    request_deserializer=rldec__pb2.TrainedAppsRequest.FromString,
                    response_serializer=rldec__pb2.TrainedAppsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rldec.v1.RLDec', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RLDec(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def decompose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rldec.v1.RLDec/decompose',
            rldec__pb2.DecompositionRequest.SerializeToString,
            rldec__pb2.DecompositionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rldec.v1.RLDec/getModels',
            rldec__pb2.ModelsRequest.SerializeToString,
            rldec__pb2.ModelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getModelDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rldec.v1.RLDec/getModelDetails',
            rldec__pb2.ModelDetailsRequest.SerializeToString,
            rldec__pb2.ModelDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTrainedApps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rldec.v1.RLDec/getTrainedApps',
            rldec__pb2.TrainedAppsRequest.SerializeToString,
            rldec__pb2.TrainedAppsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
